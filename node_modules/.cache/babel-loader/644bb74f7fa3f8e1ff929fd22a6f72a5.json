{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); // Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\nlet anyGlobal = null;\n\ntry {\n  anyGlobal = window;\n\n  if (anyGlobal == null) {\n    throw new Error(\"try next\");\n  }\n} catch (error) {\n  try {\n    anyGlobal = global;\n\n    if (anyGlobal == null) {\n      throw new Error(\"try next\");\n    }\n  } catch (error) {\n    anyGlobal = {};\n  }\n}\n\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\n\nexport function randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1 || length != length) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return arrayify(result);\n}\n;","map":{"version":3,"sources":["../src.ts/browser-random.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,QAAT,QAAyB,sBAAzB;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf,C,CAEA;AACA;;AAEA,IAAI,SAAS,GAAQ,IAArB;;AACA,IAAI;EACA,SAAS,GAAI,MAAb;;EACA,IAAI,SAAS,IAAI,IAAjB,EAAuB;IAAE,MAAM,IAAI,KAAJ,CAAU,UAAV,CAAN;EAA8B;AAC1D,CAHD,CAGE,OAAO,KAAP,EAAc;EACZ,IAAI;IACA,SAAS,GAAI,MAAb;;IACA,IAAI,SAAS,IAAI,IAAjB,EAAuB;MAAE,MAAM,IAAI,KAAJ,CAAU,UAAV,CAAN;IAA8B;EAC1D,CAHD,CAGE,OAAO,KAAP,EAAc;IACZ,SAAS,GAAG,EAAZ;EACH;AACJ;;AAED,IAAI,MAAM,GAAQ,SAAS,CAAC,MAAV,IAAoB,SAAS,CAAC,QAAhD;;AACA,IAAI,CAAC,MAAD,IAAW,CAAC,MAAM,CAAC,eAAvB,EAAwC;EAEpC,MAAM,CAAC,IAAP,CAAY,8CAAZ;EAEA,MAAM,GAAG;IACL,eAAe,EAAE,UAAS,MAAT,EAA2B;MACxC,OAAO,MAAM,CAAC,UAAP,CAAkB,mCAAlB,EAAuD,MAAM,CAAC,MAAP,CAAc,qBAArE,EAA4F;QAC/F,SAAS,EAAE;MADoF,CAA5F,CAAP;IAGH;EALI,CAAT;AAOH;;AAED,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAoC;EACtC,IAAI,MAAM,IAAI,CAAV,IAAe,MAAM,GAAG,IAAxB,IAAiC,MAAM,GAAG,CAA1C,IAAgD,MAAM,IAAI,MAA9D,EAAsE;IAClE,MAAM,CAAC,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsD,MAAtD;EACH;;EAED,MAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAf;EACA,MAAM,CAAC,eAAP,CAAuB,MAAvB;EACA,OAAO,QAAQ,CAAC,MAAD,CAAf;AACH;AAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\nlet anyGlobal = null;\ntry {\n    anyGlobal = window;\n    if (anyGlobal == null) {\n        throw new Error(\"try next\");\n    }\n}\ncatch (error) {\n    try {\n        anyGlobal = global;\n        if (anyGlobal == null) {\n            throw new Error(\"try next\");\n        }\n    }\n    catch (error) {\n        anyGlobal = {};\n    }\n}\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n    logger.warn(\"WARNING: Missing strong random number source\");\n    crypto = {\n        getRandomValues: function (buffer) {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\nexport function randomBytes(length) {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n}\n;\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"module"}