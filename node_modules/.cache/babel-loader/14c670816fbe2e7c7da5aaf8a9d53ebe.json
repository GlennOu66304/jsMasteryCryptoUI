{"ast":null,"code":"var _jsxFileName = \"/Users/glenn/react-task-trackerr/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react'; // contract\n\nimport contract from './contracts/NFTCollectible.json';\nimport './App.css';\nimport { ethers } from 'ethers'; // contract address\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0xc5d404183cb9De6a14eccb849f44A862a43c2C05\"; // abi\n\nconst abt = contract.abi;\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    // 1.check if there is metamask\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Meta mask!\");\n    } // 2.chekc if get the account \n\n\n    try {\n      // 3.yes, then setState the account\n      const account = await ethereum.request({\n        method: 'eth_requestAccounts' // params: [{ eth_accounts: {} }]\n\n      }); // https://ethereum.stackexchange.com/questions/75851/metamask-rpc-error-internal-json-rpc-error, simply clean the history and cache\n\n      console.log(\"find the address\" + account[0]);\n      setCurrentAccount(account);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWalletHandler = () => {};\n\n  const mintNftHandler = async () => {\n    try {\n      const {\n        ethereum\n      } = window; // How to Mint an NFT from Code\n      // https://docs.alchemy.com/docs/how-to-mint-an-nft-from-code\n\n      if (ethereum) {\n        const provider = new ethers.provider.Web3Provider(ethereum);\n        const singer = provider.getSinger();\n        const nftContract = new ethers.Contract(contractAddress, abi, singer);\n        console.log(\"initialize payment\"); // start mint\n\n        let nftTxn = await nftContract.mintNFT(1, {\n          value: ethers.utils.parseEther(\"0.01\")\n        }); // during mint\n\n        console.log(\"Mining... Please wait\"); // mint success\n\n        await nftTxn.wait();\n        console.log(`Mined,see transaction:https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"ethereum objext does not exit\");\n      } // mint failed\n\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWalletButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  };\n\n  const mintNftButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNftHandler,\n      className: \"cta-button mint-nft-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scrappy Squirrels Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentAccount ? mintNftButton() : connectWalletButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vg9h9hqTAVJVjklrPXRRIAqzLN0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","contract","ethers","contractAddress","abt","abi","App","currentAccount","setCurrentAccount","checkWalletIsConnected","ethereum","window","alert","account","request","method","console","log","error","connectWalletHandler","mintNftHandler","provider","Web3Provider","singer","getSinger","nftContract","Contract","nftTxn","mintNFT","value","utils","parseEther","wait","hash","err","connectWalletButton","mintNftButton"],"sources":["/Users/glenn/react-task-trackerr/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n// contract\nimport contract from './contracts/NFTCollectible.json'\nimport './App.css'\nimport { ethers } from 'ethers';\n// contract address\nconst contractAddress = \"0xc5d404183cb9De6a14eccb849f44A862a43c2C05\"\n// abi\nconst abt = contract.abi\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const checkWalletIsConnected = async () => {\n    // 1.check if there is metamask\n    const { ethereum } = window;\n    if (!ethereum) {\n      alert(\"Please install Meta mask!\")\n    }\n\n    // 2.chekc if get the account \n    try {\n\n      // 3.yes, then setState the account\n      const account = await ethereum.request({\n        method: 'eth_requestAccounts',\n        // params: [{ eth_accounts: {} }]\n      })\n      // https://ethereum.stackexchange.com/questions/75851/metamask-rpc-error-internal-json-rpc-error, simply clean the history and cache\n      console.log(\"find the address\" + account[0])\n      setCurrentAccount(account)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const connectWalletHandler = () => { }\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n      // How to Mint an NFT from Code\n      // https://docs.alchemy.com/docs/how-to-mint-an-nft-from-code\n      if (ethereum) {\n        const provider = new ethers.provider.Web3Provider(ethereum)\n        const singer = provider.getSinger();\n        const nftContract = new ethers.Contract(contractAddress, abi, singer)\n        console.log(\"initialize payment\")\n        // start mint\n        let nftTxn = await nftContract.mintNFT(1, { value: ethers.utils.parseEther(\"0.01\") });\n        // during mint\n        console.log(\"Mining... Please wait\")\n        // mint success\n        await nftTxn.wait()\n        console.log(`Mined,see transaction:https://rinkeby.etherscan.io/tx/${nftTxn.hash}`)\n\n      }\n      else {\n        console.log(\"ethereum objext does not exit\")\n      }\n\n      // mint failed\n    }\n    catch (err) {\n      console.log(err)\n    }\n  }\n\n  const connectWalletButton = () => {\n    return (\n      <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n        Connect Wallet\n      </button>\n    )\n  }\n\n  const mintNftButton = () => {\n    return (\n      <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n        Mint NFT\n      </button>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])\n\n  return (\n    <div className='main-app'>\n      <h1>Scrappy Squirrels Tutorial</h1>\n      <div>\n        {/* based on the metamask wallet connect to change the button type */}\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>\n    </div>\n  )\n}\n\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}