{"ast":null,"code":"var _jsxFileName = \"/Users/glenn/react-task-trackerr/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport Footer from './components/Footer';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); //Fetch Tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch(`http://localhost:5000/tasks`);\n    const data = await res.json();\n    return data;\n  }; //Fetch Tasks\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add a Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // const id = Math.floor(Math.random() * 10000 + 1)\n    // const newTask = {id, ...task}\n    // setTasks([...tasks, newTask])\n  }; // delete Task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // console.log('delete', id)\n  //toggle section\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task)); // console.log(id)\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n            onAdd: addTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 22\n          }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: tasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 26\n          }, this) : \"No task to show\"]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 4\n  }, this);\n}\n\n_s(App, \"iA38a5W/tRoAOuYLD6EX+b1XTrI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/glenn/react-task-trackerr/src/App.js"],"names":["useState","useEffect","Header","Tasks","Footer","AddTask","About","BrowserRouter","Router","Route","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updTask","reminder","map","props","length"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks';\nimport Footer from './components/Footer';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\nimport './App.css';\nimport {BrowserRouter as Router, Route}from 'react-router-dom'\n\n\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks,setTasks] = useState([ ])\n\n  useEffect(() => {\n      const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n  //Fetch Tasks\n    const fetchTasks = async () => {\n    const res = await fetch(`http://localhost:5000/tasks`)\n    const data = await res.json()\n    return data\n  }\n\n//Fetch Tasks\n  const fetchTask = async (id) => {\n  const res = await fetch(`http://localhost:5000/tasks/${id}`)\n  const data = await res.json()\n  return data\n}\n\n\n// Add a Task\n  const addTask = async (task)=>{\n      const res = await  fetch('http://localhost:5000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      })\nconst data = await res.json()\n\nsetTasks([...tasks, data])\n  // const id = Math.floor(Math.random() * 10000 + 1)\n  // const newTask = {id, ...task}\n  // setTasks([...tasks, newTask])\n}\n\n// delete Task\nconst deleteTask = async (id)=>{\n    await fetch(`http://localhost:5000/tasks/${id}`,{\n      method: 'DELETE',\n    })\n\n  setTasks(tasks.filter((task) =>\n  task.id !== id\n  ))\n}\n  // console.log('delete', id)\n\n  //toggle section\n\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id)\n    const updTask = {\n      ...taskToToggle,\n      reminder: !taskToToggle.reminder }\n    \n\n  const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n    method:'PUT',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(updTask),\n  })\n\n  const data= await res.json()\n\n    setTasks(\n    tasks.map((task) => \n    task.id === id ? {...task, reminder:\n    data.reminder} : task\n    ))\n    // console.log(id)\n  }\n\n  return (\n    \n   <Router>\n  <div className=\"container\">\n    \n    <Header onAdd={() => setShowAddTask(!showAddTask)}\n    showAdd={showAddTask}\n    />\n\n    <Route \n    path='/'\n    exact\n    render={(props) =>(\n    <>\n    { showAddTask && <AddTask onAdd={addTask} />}\n   \n    {tasks.length > 0 ? (<Tasks tasks={tasks} \n    onDelete={deleteTask} \n    onToggle={toggleReminder}/>) : (\"No task to show\")}\n  \n    </>\n    )}\n    />\n    <Route path='/about' component={About} />\n    <Footer />\n    </div>\n    </Router>\n  )\n }\n  \n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}